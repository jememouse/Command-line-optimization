# ============================================================================
# 增强版 Zsh 配置文件
# 实现实时命令建议、智能补全、上下文感知等功能
# ============================================================================

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ============================================================================
# Oh My Zsh 配置
# ============================================================================
export ZSH="$HOME/.oh-my-zsh"

# 设置主题
ZSH_THEME="powerlevel10k/powerlevel10k"

# 插件配置
plugins=(
    git                           # Git 集成
    brew                         # Homebrew 补全
    macos                        # macOS 特定功能
    zsh-autosuggestions          # 实时命令建议
    zsh-syntax-highlighting      # 语法高亮
    zsh-completions              # 增强补全
    zsh-history-substring-search # 历史搜索
    you-should-use              # 别名提醒
    colored-man-pages           # 彩色 man 页面
    command-not-found           # 命令未找到建议
    copypath                    # 复制路径
    copyfile                    # 复制文件内容
    dirhistory                  # 目录历史
    jsontools                   # JSON 工具
    web-search                  # 网络搜索
    extract                     # 智能解压
)

# 加载 Oh My Zsh
source $ZSH/oh-my-zsh.sh

# ============================================================================
# 历史配置 - 智能历史记录
# ============================================================================
HISTFILE=~/.zsh_history
HISTSIZE=50000                   # 内存中的历史记录数
SAVEHIST=50000                   # 文件中的历史记录数

# 历史选项
setopt EXTENDED_HISTORY          # 记录时间戳
setopt HIST_EXPIRE_DUPS_FIRST    # 删除重复的旧记录
setopt HIST_IGNORE_DUPS          # 不记录重复的命令
setopt HIST_IGNORE_ALL_DUPS      # 删除所有重复
setopt HIST_FIND_NO_DUPS         # 搜索时不显示重复
setopt HIST_IGNORE_SPACE         # 忽略以空格开头的命令
setopt HIST_SAVE_NO_DUPS         # 保存时不记录重复
setopt HIST_REDUCE_BLANKS        # 删除多余空格
setopt HIST_VERIFY               # 历史扩展时确认
setopt INC_APPEND_HISTORY        # 实时追加历史
setopt SHARE_HISTORY             # 共享历史记录

# ============================================================================
# 补全系统配置 - 智能参数补全
# ============================================================================
autoload -U compinit && compinit

# 补全选项
setopt COMPLETE_IN_WORD          # 在单词中间也能补全
setopt ALWAYS_TO_END             # 补全后光标移到末尾
setopt PATH_DIRS                 # 在路径中搜索补全
setopt AUTO_MENU                 # 自动菜单
setopt AUTO_LIST                 # 自动列出选择
setopt AUTO_PARAM_SLASH          # 目录后自动添加斜杠
setopt FLOW_CONTROL              # 启用流控制

# 补全样式
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# 智能大小写匹配
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# 进程补全
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# ============================================================================
# 环境变量和路径
# ============================================================================
# 编辑器
export EDITOR='code'
export VISUAL='code'

# 语言环境
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# 路径配置
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

# FZF 配置
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --inline-info"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# ============================================================================
# 工具集成
# ============================================================================
# Zoxide (智能 cd)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi

# FZF 集成
if command -v fzf &> /dev/null; then
    source <(fzf --zsh)
fi

# TheFuck 集成
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# ============================================================================
# 插件特定配置
# ============================================================================
# zsh-autosuggestions 配置
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,underline"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# zsh-history-substring-search 配置
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

# you-should-use 配置
export YSU_MESSAGE_POSITION="after"
export YSU_HARDCORE=1

# ============================================================================
# 智能别名系统 - 上下文感知
# ============================================================================
# 基础工具替换
if command -v eza &> /dev/null; then
    alias list='eza --icons --group-directories-first'
    alias list_long='eza -l --icons --group-directories-first --time-style=long-iso'
    alias list_all='eza -la --icons --group-directories-first --time-style=long-iso'
    alias list_tree='eza --tree --level=2 --icons'
    alias list_tree_all='eza --tree --level=2 --icons -a'
elif command -v exa &> /dev/null; then
    alias list='exa --icons --group-directories-first'
    alias list_long='exa -l --icons --group-directories-first --time-style=long-iso'
    alias list_all='exa -la --icons --group-directories-first --time-style=long-iso'
    alias list_tree='exa --tree --level=2 --icons'
    alias list_tree_all='exa --tree --level=2 --icons -a'
fi

if command -v bat &> /dev/null; then
    alias show_file='bat --paging=never'
    alias view_file='bat'
fi

if command -v fd &> /dev/null; then
    alias search_files='fd'
fi

if command -v rg &> /dev/null; then
    alias search_text='rg'
fi

# Git 增强别名
alias git_status='git status'
alias git_checkout='git checkout'
alias git_checkout_branch='git checkout -b'
alias git_add_all='git add .'
alias git_commit_message='git commit -m'
alias git_push='git push'
alias git_pull='git pull'
alias git_log_graph='git log --oneline --graph --decorate --all'
alias git_diff='git diff'
alias git_stash='git stash'
alias git_stash_pop='git stash pop'

# 系统别名
alias go_parent='cd ..'
alias go_grandparent='cd ../..'
alias go_great_grandparent='cd ../../..'
alias go_home='cd ~'
alias go_previous='cd -'

# 实用别名
alias show_history='history'
alias show_jobs='jobs'
alias clear_screen='clear'
alias exit_shell='exit'
alias reload_shell='source ~/.zshrc'
alias edit_zshrc='code ~/.zshrc'

# 网络工具
alias myip='curl -s https://ipinfo.io/ip'
alias localip='ipconfig getifaddr en0'
alias ports='lsof -i -P -n | grep LISTEN'

# 系统监控
alias cpu='top -o cpu'
alias mem='top -o rsize'
alias disk='df -h'
alias temp='sudo powermetrics --samplers smc -n 1 -i 1000 | grep -i temp'

# 环境管理别名
alias pyenv='show_python_envs'
alias nodeenv='show_node_info'
alias envinfo='show_env_status'
alias envbrief='show_env_brief'

# ============================================================================
# 智能函数 - 上下文感知提示
# ============================================================================
# 智能 cd 函数
cd() {
    builtin cd "$@"

    # 显示目录内容（如果文件不多）
    local file_count=$(ls -1 2>/dev/null | wc -l)
    if [[ $file_count -le 20 ]] && [[ $file_count -gt 0 ]]; then
        echo ""
        if command -v eza &> /dev/null; then
            eza --icons --group-directories-first
        elif command -v exa &> /dev/null; then
            exa --icons --group-directories-first
        else
            ls -la
        fi
    fi

    echo ""

    # 显示当前环境信息
    local env_brief=$(show_env_brief)
    if [[ -n "$env_brief" ]]; then
        echo "🌟 环境: $env_brief"
    fi

    # 检查是否是 Git 仓库
    if git rev-parse --git-dir > /dev/null 2>&1; then
        echo "📁 Git 仓库: $(basename $(git rev-parse --show-toplevel))"
        echo "🌿 分支: $(git branch --show-current)"

        # 显示状态（如果有变更）
        local git_status=$(git status --porcelain 2>/dev/null)
        if [[ -n "$git_status" ]]; then
            local changes=$(echo "$git_status" | wc -l | tr -d ' ')
            echo "📝 有 $changes 个未提交的更改"
        else
            echo "✅ 工作区干净"
        fi
    fi

    # 检查项目类型和给出建议
    local suggestions=()

    # Python 项目检测
    if [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]] || [[ -f "Pipfile" ]] || [[ -f "setup.py" ]]; then
        echo "🐍 检测到 Python 项目"
        if [[ -z "$VIRTUAL_ENV" ]] && [[ -z "$CONDA_DEFAULT_ENV" || "$CONDA_DEFAULT_ENV" == "base" ]]; then
            suggestions+=("激活虚拟环境")
        fi
        if [[ -f "requirements.txt" ]] && [[ -z "$VIRTUAL_ENV" ]]; then
            suggestions+=("pip install -r requirements.txt")
        fi
    fi

    # Node.js 项目检测
    if [[ -f "package.json" ]]; then
        echo "📦 检测到 Node.js 项目"
        if [[ ! -d "node_modules" ]]; then
            suggestions+=("npm install")
        fi
        # 检查是否有启动脚本
        if command -v jq &> /dev/null && [[ -f "package.json" ]]; then
            local start_script=$(jq -r '.scripts.start // empty' package.json 2>/dev/null)
            if [[ -n "$start_script" ]]; then
                suggestions+=("npm start")
            fi
        fi
    fi

    # Docker 项目检测
    if [[ -f "Dockerfile" ]]; then
        echo "🐳 检测到 Docker 项目"
        suggestions+=("docker build -t \$(basename \$(pwd)) .")
    fi

    if [[ -f "docker-compose.yml" ]] || [[ -f "docker-compose.yaml" ]]; then
        echo "🐳 检测到 Docker Compose 项目"
        suggestions+=("docker-compose up")
    fi

    # Rust 项目检测
    if [[ -f "Cargo.toml" ]]; then
        echo "🦀 检测到 Rust 项目"
        suggestions+=("cargo build" "cargo run")
    fi

    # Go 项目检测
    if [[ -f "go.mod" ]]; then
        echo "🔷 检测到 Go 项目"
        suggestions+=("go build" "go run .")
    fi

    # 显示建议
    if [[ ${#suggestions[@]} -gt 0 ]]; then
        echo "💡 建议的操作:"
        for suggestion in "${suggestions[@]}"; do
            echo "   • $suggestion"
        done
    fi

    echo ""
}

# 智能创建目录并进入
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# 创建目录并进入（完整命令版本）
make_directory_and_enter() {
    if [[ -z "$1" ]]; then
        echo "用法: make_directory_and_enter <目录名称>"
        return 1
    fi
    
    local dir_name="$1"
    
    echo "创建目录: $dir_name"
    if mkdir -p "$dir_name"; then
        echo "进入目录: $dir_name"
        builtin cd "$dir_name" || return
        echo "📁 当前位置: $(pwd)"
    else
        echo "❌ 创建目录失败: $dir_name"
        return 1
    fi
}

# 创建目录并进入（完整命令版本）
make_directory_and_enter() {
    if [[ -z "$1" ]]; then
        echo "用法: make_directory_and_enter <目录名称>"
        return 1
    fi
    
    local dir_name="$1"
    
    echo "创建目录: $dir_name"
    if mkdir -p "$dir_name"; then
        echo "进入目录: $dir_name"
        builtin cd "$dir_name" || return
        echo "📁 当前位置: $(pwd)"
    else
        echo "❌ 创建目录失败: $dir_name"
        return 1
    fi
}

# 搜索文件内容函数
search_content() {
    if [[ -z "$1" ]]; then
        echo "用法: search_content <搜索词> [目录]"
        return 1
    fi

    local search_term="$1"
    local search_dir="${2:-.}"

    if command -v rg &> /dev/null; then
        rg --color=always --heading --line-number "$search_term" "$search_dir"
    else
        grep -r --color=always -n "$search_term" "$search_dir"
    fi
}

# 查找文件函数
find_file_by_name() {
    if [[ -z "$1" ]]; then
        echo "用法: find_file_by_name <文件名模式>"
        return 1
    fi

    if command -v fd &> /dev/null; then
        fd "$1"
    else
        find . -name "*$1*" -type f
    fi
}

# 历史命令搜索函数
fuzzy_history_search() {
    if command -v fzf &> /dev/null; then
        local selected_command=$(history | fzf --tac --no-sort --height 40% --reverse --border --inline-info | sed 's/^[ ]*[0-9]*[ ]*//')
        if [[ -n "$selected_command" ]]; then
            print -z "$selected_command"
        fi
    else
        echo "❌ 需要安装 fzf 来使用此功能: brew install fzf"
        return 1
    fi
}

# 搜索文件内容（完整命令版本）
search_files() {
    if [[ -z "$1" ]]; then
        echo "用法: search_files <搜索词> [文件类型]"
        return 1
    fi
    
    local search_term="$1"
    local file_type="${2:-}"
    
    echo "🔍 搜索文件内容: '$search_term'"
    
    if [[ -n "$file_type" ]]; then
        echo "文件类型: '$file_type'"
    fi
    
    if command -v rg &> /dev/null; then
        if [[ -n "$file_type" ]]; then
            rg --color=always --line-number --heading "$search_term" --type "$file_type"
        else
            rg --color=always --line-number --heading "$search_term"
        fi
    elif command -v ag &> /dev/null; then
        if [[ -n "$file_type" ]]; then
            ag --color --line-number --heading "$search_term" --type "$file_type"
        else
            ag --color --line-number --heading "$search_term"
        fi
    else
        if [[ -n "$file_type" ]]; then
            find . -type f -name "*.$file_type" -exec grep -l "$search_term" {} \; | while read file; do
                echo "==> $file <=="
                grep -n --color=always "$search_term" "$file"
            done
        else
            grep -r --color=always -n "$search_term" .
        fi
    fi
}

# 快速查找文件
ff() {
    if [[ -z "$1" ]]; then
        echo "用法: ff <文件名模式>"
        return 1
    fi

    if command -v fd &> /dev/null; then
        fd "$1"
    else
        find . -name "*$1*" -type f
    fi
}

# 查找文件（完整命令版本）
find_files() {
    if [[ -z "$1" ]]; then
        echo "用法: find_files <文件名模式> [搜索目录]"
        return 1
    fi
    
    local file_pattern="$1"
    local search_dir="${2:-.}"
    
    echo "🔍 查找文件: '$file_pattern'"
    echo "搜索目录: '$search_dir'"
    
    if command -v fd &> /dev/null; then
        fd "$file_pattern" "$search_dir"
    elif command -v find &> /dev/null; then
        find "$search_dir" -type f -iname "*$file_pattern*"
    else
        echo "❌ 未找到 find 或 fd 命令"
        return 1
    fi
}

# 智能历史搜索函数
fh() {
    if command -v fzf &> /dev/null; then
        local selected_command=$(history | fzf --tac --no-sort --height 40% --reverse --border --inline-info | sed 's/^[ ]*[0-9]*[ ]*//')
        if [[ -n "$selected_command" ]]; then
            print -z "$selected_command"
        fi
    else
        echo "❌ 需要安装 fzf 来使用此功能: brew install fzf"
        return 1
    fi
}

# 搜索命令历史（完整命令版本）
search_history() {
    if command -v fzf &> /dev/null; then
        echo "🔍 搜索命令历史..."
        local selected_command=$(history | fzf --tac --no-sort --height 50% --reverse --border --inline-info --prompt="历史命令> " | sed 's/^[ ]*[0-9]*[ ]*//')
        if [[ -n "$selected_command" ]]; then
            echo "选择的命令: $selected_command"
            print -z "$selected_command"
        fi
    else
        echo "❌ 需要安装 fzf 来使用此功能"
        echo "安装命令: brew install fzf"
        return 1
    fi
}

# 进程查找和管理函数
fuzzy_process_kill() {
    if command -v fzf &> /dev/null; then
        local pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
        if [[ -n "$pid" ]]; then
            echo "终止进程: $pid"
            kill -9 "$pid"
        fi
    else
        echo "需要安装 fzf 来使用此功能"
    fi
}

# 查找并终止进程（完整命令版本）
find_and_kill_process() {
    if command -v fzf &> /dev/null; then
        echo "🔍 选择要终止的进程:"
        local pid=$(ps aux | sed 1d | fzf --multi --height 50% --reverse --border --prompt="选择进程> " | awk '{print $2}')
        if [[ -n "$pid" ]]; then
            echo "准备终止进程: $pid"
            echo -n "确认终止这些进程吗? [y/N]: "
            read -q confirm
            echo
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                echo "正在终止进程..."
                kill -9 $pid
                echo "进程已终止"
            else
                echo "操作已取消"
            fi
        fi
    else
        echo "❌ 需要安装 fzf 来使用此功能"
        echo "安装命令: brew install fzf"
        return 1
    fi
}

# 快速编辑配置文件
edit_config() {
    local config_files=(
        "~/.zshrc:Zsh配置"
        "~/.gitconfig:Git配置"
        "~/.condarc:Conda配置"
        "~/Library/Application Support/Code/User/settings.json:VS Code设置"
    )

    echo "选择要编辑的配置文件:"
    for i in {1..${#config_files[@]}}; do
        local file_info="${config_files[$i]}"
        local file_path="${file_info%%:*}"
        local file_desc="${file_info##*:}"
        echo "$i) $file_desc ($file_path)"
    done

    read -p "请选择 (1-${#config_files[@]}): " choice

    if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [[ "$choice" -le "${#config_files[@]}" ]]; then
        local selected="${config_files[$choice]}"
        local file_path="${selected%%:*}"
        local expanded_path="${file_path/#\~/$HOME}"

        if [[ -f "$expanded_path" ]]; then
            $EDITOR "$expanded_path"
        else
            echo "文件不存在: $expanded_path"
        fi
    else
        echo "无效选择"
    fi
}

# 项目快速启动函数
project() {
    local project_dir="$HOME/Projects"

    if [[ ! -d "$project_dir" ]]; then
        echo "项目目录不存在: $project_dir"
        return 1
    fi

    if command -v fzf &> /dev/null; then
        local selected_project=$(find "$project_dir" -maxdepth 2 -type d | fzf --preview 'ls -la {}')
        if [[ -n "$selected_project" ]]; then
            cd "$selected_project"
        fi
    else
        echo "可用项目:"
        ls -la "$project_dir"
    fi
}

# 系统信息显示
sysinfo() {
    echo "🖥️  系统信息"
    echo "============"
    echo "系统: $(uname -s)"
    echo "版本: $(sw_vers -productVersion)"
    echo "架构: $(uname -m)"
    echo "主机: $(hostname)"
    echo "用户: $(whoami)"
    echo "Shell: $SHELL"
    echo "终端: $TERM"
    echo ""
    echo "💾 内存使用:"
    vm_stat | grep -E "(free|active|inactive|wired)" | awk '{print $1 " " $3}' | sed 's/://g'
    echo ""
    echo "💿 磁盘使用:"
    df -h / | tail -1 | awk '{print "根目录: " $3 " / " $2 " (" $5 " 已使用)"}'
    echo ""
    echo "🌡️  CPU 信息:"
    sysctl -n machdep.cpu.brand_string
}

# 网络连接测试
nettest() {
    echo "🌐 网络连接测试"
    echo "==============="

    local sites=("google.com" "github.com" "stackoverflow.com")

    for site in "${sites[@]}"; do
        if ping -c 1 "$site" &> /dev/null; then
            echo "✅ $site - 连接正常"
        else
            echo "❌ $site - 连接失败"
        fi
    done

    echo ""
    echo "📡 本机 IP 地址:"
    echo "内网 IP: $(ipconfig getifaddr en0 2>/dev/null || echo '未连接')"
    echo "外网 IP: $(curl -s https://ipinfo.io/ip 2>/dev/null || echo '获取失败')"
}

# ============================================================================
# 命令记忆和统计功能
# ============================================================================
# 命令使用统计
cmd_stats() {
    echo "📊 最常用的命令 (Top 20):"
    echo "========================"
    history | awk '{print $2}' | sort | uniq -c | sort -nr | head -20 | \
    awk '{printf "%3d. %-15s (%d 次)\n", NR, $2, $1}'
}

# 今日命令统计
today_stats() {
    local today=$(date +%Y-%m-%d)
    echo "📅 今日命令统计 ($today):"
    echo "========================"

    # 从历史记录中提取今日的命令
    history | grep "$(date +%Y-%m-%d)" | awk '{print $4}' | sort | uniq -c | sort -nr | head -10 | \
    awk '{printf "%3d. %-15s (%d 次)\n", NR, $2, $1}'
}

# ============================================================================
# 环境管理专用函数
# ============================================================================
# 显示 Python 环境信息
show_python_envs() {
    echo "🐍 Python 环境信息:"
    echo "=================="

    # 当前 Python 版本
    if command -v python &> /dev/null; then
        echo "当前 Python: $(python --version) ($(which python))"
    else
        echo "当前 Python: 未安装"
    fi

    # 虚拟环境状态
    if [[ -n "$VIRTUAL_ENV" ]]; then
        echo "虚拟环境: $(basename $VIRTUAL_ENV) ✅"
        echo "环境路径: $VIRTUAL_ENV"
    else
        echo "虚拟环境: 未激活"
    fi

    # Conda 环境状态
    if command -v conda &> /dev/null; then
        echo "Conda 环境: ${CONDA_DEFAULT_ENV:-未激活}"
        if [[ -n "$CONDA_DEFAULT_ENV" ]]; then
            echo "可用环境:"
            conda env list | grep -v "^#" | sed 's/^/  /'
        fi
    fi

    # 检查常用 Python 包
    if command -v pip &> /dev/null; then
        echo ""
        echo "已安装的重要包:"
        for pkg in numpy pandas matplotlib requests flask django; do
            if pip show "$pkg" &> /dev/null; then
                local version=$(pip show "$pkg" | grep Version | cut -d' ' -f2)
                echo "  ✅ $pkg ($version)"
            else
                echo "  ❌ $pkg"
            fi
        done
    fi
}

# 显示 Node.js 环境信息
show_node_info() {
    echo "📦 Node.js 环境信息:"
    echo "==================="

    if command -v node &> /dev/null; then
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"
        echo "安装路径: $(which node)"

        # 显示全局包
        echo ""
        echo "全局安装的包:"
        npm list -g --depth=0 2>/dev/null | head -10 | sed 's/^/  /'

        # 如果在项目目录中，显示项目信息
        if [[ -f "package.json" ]]; then
            echo ""
            echo "当前项目信息:"
            if command -v jq &> /dev/null; then
                local name=$(jq -r '.name // "未命名"' package.json)
                local version=$(jq -r '.version // "未知"' package.json)
                echo "  项目名: $name"
                echo "  版本: $version"

                # 显示可用脚本
                local scripts=$(jq -r '.scripts | keys[]' package.json 2>/dev/null)
                if [[ -n "$scripts" ]]; then
                    echo "  可用脚本:"
                    echo "$scripts" | sed 's/^/    • npm run /'
                fi
            fi
        fi
    else
        echo "Node.js: 未安装"
        echo "建议安装: brew install node"
    fi
}

# 快速切换 Python 环境
switch_python_env() {
    if [[ -z "$1" ]]; then
        echo "用法: switch_python_env <环境名>"
        echo "可用环境:"
        if command -v conda &> /dev/null; then
            conda env list
        fi
        return 1
    fi

    local env_name="$1"

    # 尝试激活 Conda 环境
    if command -v conda &> /dev/null; then
        if conda env list | grep -q "^$env_name "; then
            conda activate "$env_name"
            echo "✅ 已激活 Conda 环境: $env_name"
            return 0
        fi
    fi

    # 尝试激活虚拟环境
    local venv_paths=("$HOME/.virtualenvs/$env_name" "$HOME/venvs/$env_name" "./$env_name")
    for venv_path in "${venv_paths[@]}"; do
        if [[ -f "$venv_path/bin/activate" ]]; then
            source "$venv_path/bin/activate"
            echo "✅ 已激活虚拟环境: $env_name"
            return 0
        fi
    done

    echo "❌ 未找到环境: $env_name"
    return 1
}

# 创建新的 Python 虚拟环境
create_venv() {
    local env_name="${1:-venv}"
    local python_version="${2:-python3}"

    echo "创建 Python 虚拟环境: $env_name"

    if command -v "$python_version" &> /dev/null; then
        "$python_version" -m venv "$env_name"
        echo "✅ 虚拟环境创建成功: $env_name"
        echo "激活命令: source $env_name/bin/activate"
    else
        echo "❌ Python 版本不存在: $python_version"
    fi
}

# ============================================================================
# 自定义提示符增强 - 在右侧显示环境信息
# ============================================================================
# 自定义右侧提示符函数
custom_rprompt() {
    local env_info=""

    # Python 环境信息
    if [[ -n "$VIRTUAL_ENV" ]]; then
        env_info+="%F{green}🐍$(basename $VIRTUAL_ENV)%f "
    elif [[ -n "$CONDA_DEFAULT_ENV" ]] && [[ "$CONDA_DEFAULT_ENV" != "base" ]]; then
        env_info+="%F{green}🐍$CONDA_DEFAULT_ENV%f "
    fi

    # Node.js 版本（如果在 Node.js 项目中）
    if [[ -f "package.json" ]] && command -v node &> /dev/null; then
        local node_version=$(node --version | sed 's/v//')
        env_info+="%F{cyan}📦$node_version%f "
    fi

    # 显示当前时间
    env_info+="%F{yellow}%D{%H:%M:%S}%f"

    echo "$env_info"
}

# 设置右侧提示符（如果不使用 Powerlevel10k）
if [[ "$ZSH_THEME" != "powerlevel10k/powerlevel10k" ]]; then
    RPS1='$(custom_rprompt)'
fi

# ============================================================================
# 环境变量监控 - 自动显示环境变化
# ============================================================================
# 监控环境变化的函数
check_env_changes() {
    # 检查 Python 环境变化
    if [[ "$LAST_PYTHON_ENV" != "$VIRTUAL_ENV$CONDA_DEFAULT_ENV" ]]; then
        if [[ -n "$VIRTUAL_ENV" ]]; then
            echo "🐍 已激活 Python 虚拟环境: $(basename $VIRTUAL_ENV)"
        elif [[ -n "$CONDA_DEFAULT_ENV" ]] && [[ "$CONDA_DEFAULT_ENV" != "base" ]]; then
            echo "🐍 已激活 Conda 环境: $CONDA_DEFAULT_ENV"
        elif [[ -n "$LAST_PYTHON_ENV" ]]; then
            echo "🐍 已退出 Python 环境"
        fi
        export LAST_PYTHON_ENV="$VIRTUAL_ENV$CONDA_DEFAULT_ENV"
    fi
}

# 在每个命令执行前检查环境变化
precmd_functions+=(check_env_changes)

# ============================================================================
# 键盘绑定 - 增强交互体验
# ============================================================================
# Ctrl+R: 使用 fzf 进行历史搜索
if command -v fzf &> /dev/null; then
    bindkey '^R' fzf-history-widget
fi

# Ctrl+T: 使用 fzf 选择文件
if command -v fzf &> /dev/null; then
    bindkey '^T' fzf-file-widget
fi

# Alt+C: 使用 fzf 选择目录
if command -v fzf &> /dev/null; then
    bindkey '\ec' fzf-cd-widget
fi

# Ctrl+X Ctrl+E: 在编辑器中编辑命令行
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# ============================================================================
# 环境信息显示函数
# ============================================================================
# 显示当前环境信息
show_env_status() {
    echo "🌟 当前环境状态:"
    echo "==============="

    # Python 环境信息
    if command -v python &> /dev/null; then
        local python_version=$(python --version 2>&1 | cut -d' ' -f2)
        local python_path=$(which python)
        echo "🐍 Python: $python_version ($python_path)"

        # 检查虚拟环境
        if [[ -n "$VIRTUAL_ENV" ]]; then
            echo "   虚拟环境: $(basename $VIRTUAL_ENV)"
        elif [[ -n "$CONDA_DEFAULT_ENV" ]]; then
            echo "   Conda 环境: $CONDA_DEFAULT_ENV"
        else
            echo "   环境: 系统默认"
        fi
    else
        echo "🐍 Python: 未安装"
    fi

    # Node.js 环境信息
    if command -v node &> /dev/null; then
        local node_version=$(node --version)
        echo "📦 Node.js: $node_version"

        if command -v npm &> /dev/null; then
            local npm_version=$(npm --version)
            echo "   npm: $npm_version"
        fi
    fi

    # Go 环境信息
    if command -v go &> /dev/null; then
        local go_version=$(go version | cut -d' ' -f3)
        echo "🔷 Go: $go_version"
    fi

    # Rust 环境信息
    if command -v rustc &> /dev/null; then
        local rust_version=$(rustc --version | cut -d' ' -f2)
        echo "🦀 Rust: $rust_version"
    fi

    # Java 环境信息
    if command -v java &> /dev/null; then
        local java_version=$(java -version 2>&1 | head -n1 | cut -d'"' -f2)
        echo "☕ Java: $java_version"
    fi

    # Git 信息
    if command -v git &> /dev/null; then
        local git_version=$(git --version | cut -d' ' -f3)
        echo "📚 Git: $git_version"

        # 如果在 Git 仓库中，显示仓库信息
        if git rev-parse --git-dir > /dev/null 2>&1; then
            echo "   仓库: $(basename $(git rev-parse --show-toplevel))"
            echo "   分支: $(git branch --show-current)"
            local git_status=$(git status --porcelain 2>/dev/null)
            if [[ -n "$git_status" ]]; then
                echo "   状态: 有未提交的更改"
            else
                echo "   状态: 工作区干净"
            fi
        fi
    fi

    # 系统信息
    echo "💻 系统: $(uname -s) $(uname -r)"
    echo "🏠 主目录: $HOME"
    echo "📂 当前目录: $(pwd)"
    echo ""
}

# 简化的环境信息显示（用于提示符）
show_env_brief() {
    local env_info=""

    # Python 环境
    if command -v python &> /dev/null; then
        local python_version=$(python --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f1,2)
        if [[ -n "$VIRTUAL_ENV" ]]; then
            env_info+="🐍 $(basename $VIRTUAL_ENV) (py$python_version) "
        elif [[ -n "$CONDA_DEFAULT_ENV" ]] && [[ "$CONDA_DEFAULT_ENV" != "base" ]]; then
            env_info+="🐍 $CONDA_DEFAULT_ENV (py$python_version) "
        fi
    fi

    # Node.js 环境
    if [[ -f "package.json" ]] && command -v node &> /dev/null; then
        local node_version=$(node --version | cut -d'.' -f1 | sed 's/v//')
        env_info+="📦 node$node_version "
    fi

    # Git 分支
    if git rev-parse --git-dir > /dev/null 2>&1; then
        local branch=$(git branch --show-current)
        local git_status=$(git status --porcelain 2>/dev/null)
        if [[ -n "$git_status" ]]; then
            env_info+="🌿 $branch* "
        else
            env_info+="🌿 $branch "
        fi
    fi

    if [[ -n "$env_info" ]]; then
        echo "$env_info"
    fi
}

# ============================================================================
# 启动时的欢迎信息和提示
# ============================================================================
# 显示系统信息（仅在交互式 shell 中）
if [[ $- == *i* ]]; then
    # 检查是否是新的终端会话
    if [[ -z "$TMUX" ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
        echo ""
        echo "🚀 终端增强功能已加载！"
        echo ""

        # 显示环境信息
        show_env_brief

        echo "💡 快捷功能:"
        echo "  • fuzzy_history_search     - 历史命令搜索"
        echo "  • find_file_by_name        - 按名称查找文件"
        echo "  • search_content           - 搜索文件内容"
        echo "  • fuzzy_process_kill       - 进程管理"
        echo "  • project                  - 快速切换项目"
        echo "  • sysinfo                  - 系统信息"
        echo "  • nettest                  - 网络测试"
        echo "  • cmd_stats                - 命令统计"
        echo ""
        echo "🌟 环境管理:"
        echo "  • show_env_status - 显示详细环境信息"
        echo "  • pyenv           - Python 环境信息"
        echo "  • nodeenv         - Node.js 环境信息"
        echo "  • switch_python_env <名称> - 切换 Python 环境"
        echo "  • create_venv <名称> - 创建虚拟环境"
        echo ""
        echo "⌨️  快捷键:"
        echo "  • Ctrl+R   - 历史搜索"
        echo "  • Ctrl+T   - 文件选择"
        echo "  • Alt+C    - 目录选择"
        echo "  • ↑/↓      - 历史子串搜索"
        echo ""
    fi
fi

# ============================================================================
# Powerlevel10k 配置
# ============================================================================
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ============================================================================
# 条件加载 - 性能优化
# ============================================================================
# 延迟加载重型插件
lazy_load() {
    local plugin_name="$1"
    local plugin_path="$2"

    if [[ -f "$plugin_path" ]]; then
        eval "$plugin_name() { unfunction $plugin_name; source $plugin_path; $plugin_name \$@ }"
    fi
}

# 延迟加载 conda
if [[ -f "$HOME/miniforge3/etc/profile.d/conda.sh" ]]; then
    lazy_load conda "$HOME/miniforge3/etc/profile.d/conda.sh"
fi

# ============================================================================
# 最终配置和清理
# ============================================================================
# 确保补全系统正确初始化
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# 加载自定义配置（如果存在）
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# 设置终端标题
case $TERM in
    xterm*|rxvt*|screen*|tmux*)
        precmd() {
            print -Pn "\e]0;%n@%m: %~\a"
        }
        ;;
esac

# 最后的环境检查
if ! command -v fzf &> /dev/null; then
    echo "⚠️  建议安装 fzf 以获得更好的搜索体验: brew install fzf"
fi

if ! command -v eza &> /dev/null && ! command -v exa &> /dev/null; then
    echo "⚠️  建议安装 eza 以获得更好的文件列表体验: brew install eza"
fi
