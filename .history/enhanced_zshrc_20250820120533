# ============================================================================
# 增强版 Zsh 配置文件
# 实现实时命令建议、智能补全、上下文感知等功能
# ============================================================================

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ============================================================================
# Oh My Zsh 配置
# ============================================================================
export ZSH="$HOME/.oh-my-zsh"

# 设置主题
ZSH_THEME="powerlevel10k/powerlevel10k"

# 插件配置
plugins=(
    git                           # Git 集成
    brew                         # Homebrew 补全
    macos                        # macOS 特定功能
    zsh-autosuggestions          # 实时命令建议
    zsh-syntax-highlighting      # 语法高亮
    zsh-completions              # 增强补全
    zsh-history-substring-search # 历史搜索
    you-should-use              # 别名提醒
    colored-man-pages           # 彩色 man 页面
    command-not-found           # 命令未找到建议
    copypath                    # 复制路径
    copyfile                    # 复制文件内容
    dirhistory                  # 目录历史
    jsontools                   # JSON 工具
    web-search                  # 网络搜索
    extract                     # 智能解压
)

# 加载 Oh My Zsh
source $ZSH/oh-my-zsh.sh

# ============================================================================
# 历史配置 - 智能历史记录
# ============================================================================
HISTFILE=~/.zsh_history
HISTSIZE=50000                   # 内存中的历史记录数
SAVEHIST=50000                   # 文件中的历史记录数

# 历史选项
setopt EXTENDED_HISTORY          # 记录时间戳
setopt HIST_EXPIRE_DUPS_FIRST    # 删除重复的旧记录
setopt HIST_IGNORE_DUPS          # 不记录重复的命令
setopt HIST_IGNORE_ALL_DUPS      # 删除所有重复
setopt HIST_FIND_NO_DUPS         # 搜索时不显示重复
setopt HIST_IGNORE_SPACE         # 忽略以空格开头的命令
setopt HIST_SAVE_NO_DUPS         # 保存时不记录重复
setopt HIST_REDUCE_BLANKS        # 删除多余空格
setopt HIST_VERIFY               # 历史扩展时确认
setopt INC_APPEND_HISTORY        # 实时追加历史
setopt SHARE_HISTORY             # 共享历史记录

# ============================================================================
# 补全系统配置 - 智能参数补全
# ============================================================================
autoload -U compinit && compinit

# 补全选项
setopt COMPLETE_IN_WORD          # 在单词中间也能补全
setopt ALWAYS_TO_END             # 补全后光标移到末尾
setopt PATH_DIRS                 # 在路径中搜索补全
setopt AUTO_MENU                 # 自动菜单
setopt AUTO_LIST                 # 自动列出选择
setopt AUTO_PARAM_SLASH          # 目录后自动添加斜杠
setopt FLOW_CONTROL              # 启用流控制

# 补全样式
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# 智能大小写匹配
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# 进程补全
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# ============================================================================
# 环境变量和路径
# ============================================================================
# 编辑器
export EDITOR='code'
export VISUAL='code'

# 语言环境
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# 路径配置
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

# FZF 配置
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --inline-info"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# ============================================================================
# 工具集成
# ============================================================================
# Zoxide (智能 cd)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi

# FZF 集成
if command -v fzf &> /dev/null; then
    source <(fzf --zsh)
fi

# TheFuck 集成
if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# ============================================================================
# 插件特定配置
# ============================================================================
# zsh-autosuggestions 配置
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,underline"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# zsh-history-substring-search 配置
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

# you-should-use 配置
export YSU_MESSAGE_POSITION="after"
export YSU_HARDCORE=1

# ============================================================================
# 智能别名系统 - 上下文感知
# ============================================================================
# 基础工具替换
if command -v exa &> /dev/null; then
    alias ls='exa --icons --group-directories-first'
    alias ll='exa -l --icons --group-directories-first --time-style=long-iso'
    alias la='exa -la --icons --group-directories-first --time-style=long-iso'
    alias lt='exa --tree --level=2 --icons'
    alias lta='exa --tree --level=2 --icons -a'
fi

if command -v bat &> /dev/null; then
    alias cat='bat --paging=never'
    alias less='bat'
fi

if command -v fd &> /dev/null; then
    alias find='fd'
fi

if command -v rg &> /dev/null; then
    alias grep='rg'
fi

# Git 增强别名
alias gst='git status'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gaa='git add .'
alias gcm='git commit -m'
alias gps='git push'
alias gpl='git pull'
alias glog='git log --oneline --graph --decorate --all'
alias gdiff='git diff'
alias gstash='git stash'
alias gpop='git stash pop'

# 系统别名
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# 实用别名
alias h='history'
alias j='jobs'
alias c='clear'
alias q='exit'
alias reload='source ~/.zshrc'
alias zshconfig='code ~/.zshrc'

# 网络工具
alias myip='curl -s https://ipinfo.io/ip'
alias localip='ipconfig getifaddr en0'
alias ports='lsof -i -P -n | grep LISTEN'

# 系统监控
alias cpu='top -o cpu'
alias mem='top -o rsize'
alias disk='df -h'
alias temp='sudo powermetrics --samplers smc -n 1 -i 1000 | grep -i temp'

# ============================================================================
# 智能函数 - 上下文感知提示
# ============================================================================
# 智能 cd 函数
cd() {
    builtin cd "$@"

    # 显示目录内容（如果文件不多）
    local file_count=$(ls -1 | wc -l)
    if [[ $file_count -le 20 ]]; then
        echo ""
        if command -v exa &> /dev/null; then
            exa --icons --group-directories-first
        else
            ls -la
        fi
    fi

    # 检查是否是 Git 仓库
    if git rev-parse --git-dir > /dev/null 2>&1; then
        echo ""
        echo "📁 Git 仓库: $(basename $(git rev-parse --show-toplevel))"
        echo "🌿 分支: $(git branch --show-current)"

        # 显示状态（如果有变更）
        if ! git diff-index --quiet HEAD --; then
            echo "📝 有未提交的更改"
        fi
    fi

    # 检查是否有 Python 虚拟环境
    if [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]] || [[ -f "Pipfile" ]]; then
        echo "🐍 检测到 Python 项目"
        if [[ -z "$VIRTUAL_ENV" ]]; then
            echo "💡 提示: 可能需要激活虚拟环境"
        fi
    fi

    # 检查是否有 Node.js 项目
    if [[ -f "package.json" ]]; then
        echo "📦 检测到 Node.js 项目"
        if [[ ! -d "node_modules" ]]; then
            echo "💡 提示: 运行 'npm install' 安装依赖"
        fi
    fi

    # 检查是否有 Docker
    if [[ -f "Dockerfile" ]] || [[ -f "docker-compose.yml" ]]; then
        echo "🐳 检测到 Docker 项目"
    fi
}

# 智能创建目录并进入
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# 快速搜索文件内容
search() {
    if [[ -z "$1" ]]; then
        echo "用法: search <搜索词> [目录]"
        return 1
    fi

    local search_term="$1"
    local search_dir="${2:-.}"

    if command -v rg &> /dev/null; then
        rg --color=always --heading --line-number "$search_term" "$search_dir"
    else
        grep -r --color=always -n "$search_term" "$search_dir"
    fi
}

# 快速查找文件
ff() {
    if [[ -z "$1" ]]; then
        echo "用法: ff <文件名模式>"
        return 1
    fi

    if command -v fd &> /dev/null; then
        fd "$1"
    else
        find . -name "*$1*" -type f
    fi
}

# 智能历史搜索函数
fh() {
    if command -v fzf &> /dev/null; then
        local selected_command=$(history | fzf --tac --no-sort | sed 's/^[ ]*[0-9]*[ ]*//')
        if [[ -n "$selected_command" ]]; then
            print -z "$selected_command"
        fi
    else
        echo "需要安装 fzf 来使用此功能"
    fi
}

# 智能进程查找和管理
fkill() {
    if command -v fzf &> /dev/null; then
        local pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
        if [[ -n "$pid" ]]; then
            echo "终止进程: $pid"
            kill -9 "$pid"
        fi
    else
        echo "需要安装 fzf 来使用此功能"
    fi
}

# 快速编辑配置文件
edit_config() {
    local config_files=(
        "~/.zshrc:Zsh配置"
        "~/.gitconfig:Git配置"
        "~/.condarc:Conda配置"
        "~/Library/Application Support/Code/User/settings.json:VS Code设置"
    )

    echo "选择要编辑的配置文件:"
    for i in {1..${#config_files[@]}}; do
        local file_info="${config_files[$i]}"
        local file_path="${file_info%%:*}"
        local file_desc="${file_info##*:}"
        echo "$i) $file_desc ($file_path)"
    done

    read -p "请选择 (1-${#config_files[@]}): " choice

    if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [[ "$choice" -le "${#config_files[@]}" ]]; then
        local selected="${config_files[$choice]}"
        local file_path="${selected%%:*}"
        local expanded_path="${file_path/#\~/$HOME}"

        if [[ -f "$expanded_path" ]]; then
            $EDITOR "$expanded_path"
        else
            echo "文件不存在: $expanded_path"
        fi
    else
        echo "无效选择"
    fi
}

# 项目快速启动函数
project() {
    local project_dir="$HOME/Projects"

    if [[ ! -d "$project_dir" ]]; then
        echo "项目目录不存在: $project_dir"
        return 1
    fi

    if command -v fzf &> /dev/null; then
        local selected_project=$(find "$project_dir" -maxdepth 2 -type d | fzf --preview 'ls -la {}')
        if [[ -n "$selected_project" ]]; then
            cd "$selected_project"
        fi
    else
        echo "可用项目:"
        ls -la "$project_dir"
    fi
}

# 系统信息显示
sysinfo() {
    echo "🖥️  系统信息"
    echo "============"
    echo "系统: $(uname -s)"
    echo "版本: $(sw_vers -productVersion)"
    echo "架构: $(uname -m)"
    echo "主机: $(hostname)"
    echo "用户: $(whoami)"
    echo "Shell: $SHELL"
    echo "终端: $TERM"
    echo ""
    echo "💾 内存使用:"
    vm_stat | grep -E "(free|active|inactive|wired)" | awk '{print $1 " " $3}' | sed 's/://g'
    echo ""
    echo "💿 磁盘使用:"
    df -h / | tail -1 | awk '{print "根目录: " $3 " / " $2 " (" $5 " 已使用)"}'
    echo ""
    echo "🌡️  CPU 信息:"
    sysctl -n machdep.cpu.brand_string
}

# 网络连接测试
nettest() {
    echo "🌐 网络连接测试"
    echo "==============="

    local sites=("google.com" "github.com" "stackoverflow.com")

    for site in "${sites[@]}"; do
        if ping -c 1 "$site" &> /dev/null; then
            echo "✅ $site - 连接正常"
        else
            echo "❌ $site - 连接失败"
        fi
    done

    echo ""
    echo "📡 本机 IP 地址:"
    echo "内网 IP: $(ipconfig getifaddr en0 2>/dev/null || echo '未连接')"
    echo "外网 IP: $(curl -s https://ipinfo.io/ip 2>/dev/null || echo '获取失败')"
}

# ============================================================================
# 命令记忆和统计功能
# ============================================================================
# 命令使用统计
cmd_stats() {
    echo "📊 最常用的命令 (Top 20):"
    echo "========================"
    history | awk '{print $2}' | sort | uniq -c | sort -nr | head -20 | \
    awk '{printf "%3d. %-15s (%d 次)\n", NR, $2, $1}'
}

# 今日命令统计
today_stats() {
    local today=$(date +%Y-%m-%d)
    echo "📅 今日命令统计 ($today):"
    echo "========================"

    # 从历史记录中提取今日的命令
    history | grep "$(date +%Y-%m-%d)" | awk '{print $4}' | sort | uniq -c | sort -nr | head -10 | \
    awk '{printf "%3d. %-15s (%d 次)\n", NR, $2, $1}'
}
