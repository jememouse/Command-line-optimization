# =============================================================================
#                           基础 ZSH 配置文件
# =============================================================================

# -----------------------------------------------------------------------------
#                           1. 基础历史记录设置
# -----------------------------------------------------------------------------
HISTFILE=~/.zsh_history
HISTSIZE=50000                   # 内存中的历史记录条数
SAVEHIST=50000                   # 历史记录文件中的条数

# 历史记录设置
setopt EXTENDED_HISTORY          # 记录命令的开始时间戳和执行时间
setopt HIST_EXPIRE_DUPS_FIRST   # 首先删除重复条目
setopt HIST_IGNORE_DUPS         # 不记录重复的命令
setopt HIST_IGNORE_ALL_DUPS     # 如有重复，删除旧的记录
setopt HIST_FIND_NO_DUPS        # 搜索时不显示重复命令
setopt HIST_IGNORE_SPACE        # 不记录以空格开头的命令
setopt HIST_SAVE_NO_DUPS        # 不保存重复的命令
setopt HIST_VERIFY              # 在执行历史命令前先显示命令
setopt INC_APPEND_HISTORY       # 实时追加历史记录
setopt SHARE_HISTORY           # 共享历史记录

# -----------------------------------------------------------------------------
#                           2. 命令补全系统
# -----------------------------------------------------------------------------
# 加载补全系统
autoload -Uz compinit && compinit

# 补全选项
setopt AUTO_LIST               # 自动列出选项
setopt AUTO_MENU              # 自动使用菜单
setopt COMPLETE_IN_WORD       # 在单词中也能补全
setopt ALWAYS_TO_END          # 补全后光标移到末尾

# 补全样式设置
zstyle ':completion:*' menu select                 # 使用菜单选择
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # 忽略大小写
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}" # 彩色补全菜单
zstyle ':completion:*' verbose yes                 # 详细信息
zstyle ':completion:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:messages' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}-- 没有匹配项 --%f'

# -----------------------------------------------------------------------------
#                           3. 环境变量和路径配置
# -----------------------------------------------------------------------------
# 基础环境变量
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export EDITOR='vim'
export VISUAL='vim'

# PATH 配置
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

# -----------------------------------------------------------------------------
#                           4. 实时命令建议和智能补全
# -----------------------------------------------------------------------------
# 加载 zsh-autosuggestions 插件（如果已安装）
if [ -f ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
    # 建议显示样式
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
fi

# 加载 zsh-syntax-highlighting 插件（如果已安装）
if [ -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# -----------------------------------------------------------------------------
#                           5. 项目类型自动检测
# -----------------------------------------------------------------------------
function detect_project_type() {
    local project_info=""
    
    # Python 项目检测
    if [[ -f "requirements.txt" ]] || [[ -f "setup.py" ]] || [[ -f "pyproject.toml" ]]; then
        project_info+="📦 Python 项目\n"
        # 检测虚拟环境
        if [[ -d "venv" ]] || [[ -d ".venv" ]]; then
            project_info+="🔵 发现虚拟环境\n"
        fi
    fi
    
    # Node.js 项目检测
    if [[ -f "package.json" ]]; then
        project_info+="⚡ Node.js 项目\n"
        if [[ ! -d "node_modules" ]]; then
            project_info+="⚠️  提示: 需要运行 npm install\n"
        fi
    fi
    
    # Git 仓库检测
    if git rev-parse --git-dir > /dev/null 2>&1; then
        project_info+="🌿 Git 仓库: $(git branch --show-current)\n"
    fi

    # Docker 项目检测
    if [[ -f "Dockerfile" ]] || [[ -f "docker-compose.yml" ]]; then
        project_info+="🐳 Docker 项目\n"
    fi

    [[ -n $project_info ]] && echo "\n项目信息:\n$project_info"
}

# -----------------------------------------------------------------------------
#                           6. 环境状态监控
# -----------------------------------------------------------------------------
function show_env_info() {
    local env_info=""

    # Python 环境信息
    if command -v python &>/dev/null; then
        env_info+="🐍 Python: $(python --version 2>&1)\n"
        if [[ -n "$VIRTUAL_ENV" ]]; then
            env_info+="   虚拟环境: $(basename $VIRTUAL_ENV)\n"
        fi
    fi

    # Node.js 环境信息
    if command -v node &>/dev/null; then
        env_info+="⚡ Node.js: $(node --version)\n"
    fi

    # Git 状态
    if git rev-parse --git-dir &>/dev/null; then
        local branch=$(git branch --show-current)
        env_info+="🌿 Git 分支: $branch\n"
        
        # 检查是否有未提交的变更
        if ! git diff --quiet; then
            env_info+="   有未提交的更改\n"
        fi
    fi

    echo "\n环境信息:\n$env_info"
}

# -----------------------------------------------------------------------------
#                           7. 智能 CD 函数
# -----------------------------------------------------------------------------
function smart_cd() {
    builtin cd "$@"
    detect_project_type
    show_env_info
}

alias cd='smart_cd'

# -----------------------------------------------------------------------------
#                           8. 实用别名
# -----------------------------------------------------------------------------
# 文件列表
alias ls='ls -G'
alias ll='ls -lh'
alias la='ls -lah'

# 目录操作
alias ..='cd ..'
alias ...='cd ../..'
alias mkdir='mkdir -p'

# Git 快捷命令
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'

# -----------------------------------------------------------------------------
#                           9. 提示符设置
# -----------------------------------------------------------------------------
# 简单但信息丰富的提示符
PROMPT='%F{green}%n@%m%f:%F{blue}%~%f$(git_prompt_info)$ '

# Git 提示符信息
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats ' (%b)'
setopt prompt_subst
RPROMPT='${vcs_info_msg_0_}'

# -----------------------------------------------------------------------------
#                           10. 自动加载配置
# -----------------------------------------------------------------------------
# 加载本地配置（如果存在）
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# 输出欢迎信息
echo "配置加载完成！使用 'show_env_info' 查看环境状态"